// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// joybus //
// ------ //

#define joybus_wrap_target 0
#define joybus_wrap 25
#define joybus_pio_version 1

#define joybus_T1 10
#define joybus_T2 20
#define joybus_T3 10

#define joybus_offset_read 0u
#define joybus_offset_write 8u

static const uint16_t joybus_program_instructions[] = {
            //     .wrap_target
    0xe080, //  0: set    pindirs, 0
    0x20a0, //  1: wait   1 pin, 0
    0x3320, //  2: wait   0 pin, 0               [19]
    0x4f01, //  3: in     pins, 1                [15]
    0x00c2, //  4: jmp    pin, 2
    0xa0c3, //  5: mov    isr, null
    0x20a0, //  6: wait   1 pin, 0
    0x0002, //  7: jmp    2
    0xe081, //  8: set    pindirs, 1
    0xe001, //  9: set    pins, 1
    0x80e0, // 10: pull   ifempty block
    0x6021, // 11: out    x, 1
    0x00f1, // 12: jmp    !osre, 17
    0x00b6, // 13: jmp    x != y, 22
    0x80e0, // 14: pull   ifempty block
    0x6021, // 15: out    x, 1
    0x0012, // 16: jmp    18
    0xa342, // 17: nop                           [3]
    0xa142, // 18: nop                           [1]
    0xe900, // 19: set    pins, 0                [9]
    0xb201, // 20: mov    pins, x                [18]
    0x0009, // 21: jmp    9
    0xa442, // 22: nop                           [4]
    0xe900, // 23: set    pins, 0                [9]
    0xf201, // 24: set    pins, 1                [18]
    0x0000, // 25: jmp    0
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program joybus_program = {
    .instructions = joybus_program_instructions,
    .length = 26,
    .origin = -1,
    .pio_version = joybus_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config joybus_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + joybus_wrap_target, offset + joybus_wrap);
    return c;
}

#include <hardware/clocks.h>
static inline pio_sm_config joybus_program_get_config(PIO pio, uint sm, uint offset, uint pin) {
    pio_gpio_init(pio, pin);
    pio_sm_config c = joybus_program_get_default_config(offset);
    sm_config_set_out_pins(&c, pin, 1);
    sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_in_pins(&c, pin);
    sm_config_set_jmp_pin(&c, pin);
    // Shift to left, no autopull, 9 bit
    sm_config_set_out_shift(&c, false, false, 9);
    // Shift to left, autopush, 8 bit
    sm_config_set_in_shift(&c, false, true, 8);
    int cycles_per_bit = joybus_T1 + joybus_T2 + joybus_T3;
    int bitrate = 250000;
    float div = clock_get_hz(clk_sys) / (cycles_per_bit * bitrate);
    sm_config_set_clkdiv(&c, div);
    return c;
}
static inline void joybus_program_send_init(
    PIO pio,
    uint sm,
    uint offset,
    uint pin,
    pio_sm_config *c
) {
    pio_sm_init(pio, sm, offset + joybus_offset_write, c);
    pio_sm_set_enabled(pio, sm, true);
}
static inline void joybus_program_receive_init(
    PIO pio,
    uint sm,
    uint offset,
    uint pin,
    pio_sm_config *c
) {
    pio_sm_init(pio, sm, offset + joybus_offset_read, c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

